{"version":3,"file":"static/js/726.ac7dd173.chunk.js","mappings":"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","sources":["../node_modules/@ffmpeg/ffmpeg/dist/esm/const.js","../node_modules/@ffmpeg/ffmpeg/dist/esm/errors.js","../node_modules/@ffmpeg/ffmpeg/dist/esm/worker.js"],"sourcesContent":["export const MIME_TYPE_JAVASCRIPT = \"text/javascript\";\nexport const MIME_TYPE_WASM = \"application/wasm\";\nexport const CORE_VERSION = \"0.12.6\";\nexport const CORE_URL = `https://unpkg.com/@ffmpeg/core@${CORE_VERSION}/dist/umd/ffmpeg-core.js`;\nexport var FFMessageType;\n(function (FFMessageType) {\n    FFMessageType[\"LOAD\"] = \"LOAD\";\n    FFMessageType[\"EXEC\"] = \"EXEC\";\n    FFMessageType[\"WRITE_FILE\"] = \"WRITE_FILE\";\n    FFMessageType[\"READ_FILE\"] = \"READ_FILE\";\n    FFMessageType[\"DELETE_FILE\"] = \"DELETE_FILE\";\n    FFMessageType[\"RENAME\"] = \"RENAME\";\n    FFMessageType[\"CREATE_DIR\"] = \"CREATE_DIR\";\n    FFMessageType[\"LIST_DIR\"] = \"LIST_DIR\";\n    FFMessageType[\"DELETE_DIR\"] = \"DELETE_DIR\";\n    FFMessageType[\"ERROR\"] = \"ERROR\";\n    FFMessageType[\"DOWNLOAD\"] = \"DOWNLOAD\";\n    FFMessageType[\"PROGRESS\"] = \"PROGRESS\";\n    FFMessageType[\"LOG\"] = \"LOG\";\n    FFMessageType[\"MOUNT\"] = \"MOUNT\";\n    FFMessageType[\"UNMOUNT\"] = \"UNMOUNT\";\n})(FFMessageType || (FFMessageType = {}));\n","export const ERROR_UNKNOWN_MESSAGE_TYPE = new Error(\"unknown message type\");\nexport const ERROR_NOT_LOADED = new Error(\"ffmpeg is not loaded, call `await ffmpeg.load()` first\");\nexport const ERROR_TERMINATED = new Error(\"called FFmpeg.terminate()\");\nexport const ERROR_IMPORT_FAILURE = new Error(\"failed to import ffmpeg-core.js\");\n","/// <reference no-default-lib=\"true\" />\n/// <reference lib=\"esnext\" />\n/// <reference lib=\"webworker\" />\nimport { CORE_URL, FFMessageType } from \"./const.js\";\nimport { ERROR_UNKNOWN_MESSAGE_TYPE, ERROR_NOT_LOADED, ERROR_IMPORT_FAILURE, } from \"./errors.js\";\nlet ffmpeg;\nconst load = async ({ coreURL: _coreURL, wasmURL: _wasmURL, workerURL: _workerURL, }) => {\n    const first = !ffmpeg;\n    try {\n        if (!_coreURL)\n            _coreURL = CORE_URL;\n        // when web worker type is `classic`.\n        importScripts(_coreURL);\n    }\n    catch {\n        if (!_coreURL)\n            _coreURL = CORE_URL.replace('/umd/', '/esm/');\n        // when web worker type is `module`.\n        self.createFFmpegCore = (await import(\n        /* webpackIgnore: true */ /* @vite-ignore */ _coreURL)).default;\n        if (!self.createFFmpegCore) {\n            throw ERROR_IMPORT_FAILURE;\n        }\n    }\n    const coreURL = _coreURL;\n    const wasmURL = _wasmURL ? _wasmURL : _coreURL.replace(/.js$/g, \".wasm\");\n    const workerURL = _workerURL\n        ? _workerURL\n        : _coreURL.replace(/.js$/g, \".worker.js\");\n    ffmpeg = await self.createFFmpegCore({\n        // Fix `Overload resolution failed.` when using multi-threaded ffmpeg-core.\n        // Encoded wasmURL and workerURL in the URL as a hack to fix locateFile issue.\n        mainScriptUrlOrBlob: `${coreURL}#${btoa(JSON.stringify({ wasmURL, workerURL }))}`,\n    });\n    ffmpeg.setLogger((data) => self.postMessage({ type: FFMessageType.LOG, data }));\n    ffmpeg.setProgress((data) => self.postMessage({\n        type: FFMessageType.PROGRESS,\n        data,\n    }));\n    return first;\n};\nconst exec = ({ args, timeout = -1 }) => {\n    ffmpeg.setTimeout(timeout);\n    ffmpeg.exec(...args);\n    const ret = ffmpeg.ret;\n    ffmpeg.reset();\n    return ret;\n};\nconst writeFile = ({ path, data }) => {\n    ffmpeg.FS.writeFile(path, data);\n    return true;\n};\nconst readFile = ({ path, encoding }) => ffmpeg.FS.readFile(path, { encoding });\n// TODO: check if deletion works.\nconst deleteFile = ({ path }) => {\n    ffmpeg.FS.unlink(path);\n    return true;\n};\nconst rename = ({ oldPath, newPath }) => {\n    ffmpeg.FS.rename(oldPath, newPath);\n    return true;\n};\n// TODO: check if creation works.\nconst createDir = ({ path }) => {\n    ffmpeg.FS.mkdir(path);\n    return true;\n};\nconst listDir = ({ path }) => {\n    const names = ffmpeg.FS.readdir(path);\n    const nodes = [];\n    for (const name of names) {\n        const stat = ffmpeg.FS.stat(`${path}/${name}`);\n        const isDir = ffmpeg.FS.isDir(stat.mode);\n        nodes.push({ name, isDir });\n    }\n    return nodes;\n};\n// TODO: check if deletion works.\nconst deleteDir = ({ path }) => {\n    ffmpeg.FS.rmdir(path);\n    return true;\n};\nconst mount = ({ fsType, options, mountPoint }) => {\n    const str = fsType;\n    const fs = ffmpeg.FS.filesystems[str];\n    if (!fs)\n        return false;\n    ffmpeg.FS.mount(fs, options, mountPoint);\n    return true;\n};\nconst unmount = ({ mountPoint }) => {\n    ffmpeg.FS.unmount(mountPoint);\n    return true;\n};\nself.onmessage = async ({ data: { id, type, data: _data }, }) => {\n    const trans = [];\n    let data;\n    try {\n        if (type !== FFMessageType.LOAD && !ffmpeg)\n            throw ERROR_NOT_LOADED; // eslint-disable-line\n        switch (type) {\n            case FFMessageType.LOAD:\n                data = await load(_data);\n                break;\n            case FFMessageType.EXEC:\n                data = exec(_data);\n                break;\n            case FFMessageType.WRITE_FILE:\n                data = writeFile(_data);\n                break;\n            case FFMessageType.READ_FILE:\n                data = readFile(_data);\n                break;\n            case FFMessageType.DELETE_FILE:\n                data = deleteFile(_data);\n                break;\n            case FFMessageType.RENAME:\n                data = rename(_data);\n                break;\n            case FFMessageType.CREATE_DIR:\n                data = createDir(_data);\n                break;\n            case FFMessageType.LIST_DIR:\n                data = listDir(_data);\n                break;\n            case FFMessageType.DELETE_DIR:\n                data = deleteDir(_data);\n                break;\n            case FFMessageType.MOUNT:\n                data = mount(_data);\n                break;\n            case FFMessageType.UNMOUNT:\n                data = unmount(_data);\n                break;\n            default:\n                throw ERROR_UNKNOWN_MESSAGE_TYPE;\n        }\n    }\n    catch (e) {\n        self.postMessage({\n            id,\n            type: FFMessageType.ERROR,\n            data: e.toString(),\n        });\n        return;\n    }\n    if (data instanceof Uint8Array) {\n        trans.push(data.buffer);\n    }\n    self.postMessage({ id, type, data }, trans);\n};\n"],"names":["CORE_URL","concat","FFMessageType","ERROR_UNKNOWN_MESSAGE_TYPE","Error","ERROR_NOT_LOADED","ERROR_IMPORT_FAILURE","ffmpeg","self","onmessage","async","data","id","type","_data","_ref12","trans","LOAD","coreURL","_coreURL","wasmURL","_wasmURL","workerURL","_workerURL","_ref","first","importScripts","_unused","replace","createFFmpegCore","import","default","mainScriptUrlOrBlob","btoa","JSON","stringify","setLogger","postMessage","LOG","setProgress","PROGRESS","load","EXEC","_ref2","args","timeout","setTimeout","exec","ret","reset","WRITE_FILE","_ref3","path","FS","writeFile","READ_FILE","_ref4","encoding","readFile","DELETE_FILE","_ref5","unlink","deleteFile","RENAME","_ref6","oldPath","newPath","rename","CREATE_DIR","_ref7","mkdir","createDir","LIST_DIR","_ref8","names","readdir","nodes","name","stat","isDir","mode","push","listDir","DELETE_DIR","_ref9","rmdir","deleteDir","MOUNT","_ref10","fsType","options","mountPoint","str","fs","filesystems","mount","UNMOUNT","_ref11","unmount","e","ERROR","toString","Uint8Array","buffer"],"sourceRoot":""}